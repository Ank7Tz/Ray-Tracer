// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: ray_tracer.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Material_Type int32

const (
	Material_LAMBERTIAN Material_Type = 0
	Material_METAL      Material_Type = 1
	Material_DIELECTRIC Material_Type = 2
)

// Enum value maps for Material_Type.
var (
	Material_Type_name = map[int32]string{
		0: "LAMBERTIAN",
		1: "METAL",
		2: "DIELECTRIC",
	}
	Material_Type_value = map[string]int32{
		"LAMBERTIAN": 0,
		"METAL":      1,
		"DIELECTRIC": 2,
	}
)

func (x Material_Type) Enum() *Material_Type {
	p := new(Material_Type)
	*p = x
	return p
}

func (x Material_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Material_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ray_tracer_proto_enumTypes[0].Descriptor()
}

func (Material_Type) Type() protoreflect.EnumType {
	return &file_ray_tracer_proto_enumTypes[0]
}

func (x Material_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Material_Type.Descriptor instead.
func (Material_Type) EnumDescriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{1, 0}
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         int32                  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_ray_tracer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ray_tracer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Material struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaterialType    Material_Type          `protobuf:"varint,1,opt,name=MaterialType,proto3,enum=ray_tracer.Material_Type" json:"MaterialType,omitempty"`
	Albedo          []float32              `protobuf:"fixed32,2,rep,packed,name=albedo,proto3" json:"albedo,omitempty"`
	Fuzz            float32                `protobuf:"fixed32,3,opt,name=fuzz,proto3" json:"fuzz,omitempty"`
	RefractionIndex float32                `protobuf:"fixed32,4,opt,name=refraction_index,json=refractionIndex,proto3" json:"refraction_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Material) Reset() {
	*x = Material{}
	mi := &file_ray_tracer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_ray_tracer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{1}
}

func (x *Material) GetMaterialType() Material_Type {
	if x != nil {
		return x.MaterialType
	}
	return Material_LAMBERTIAN
}

func (x *Material) GetAlbedo() []float32 {
	if x != nil {
		return x.Albedo
	}
	return nil
}

func (x *Material) GetFuzz() float32 {
	if x != nil {
		return x.Fuzz
	}
	return 0
}

func (x *Material) GetRefractionIndex() float32 {
	if x != nil {
		return x.RefractionIndex
	}
	return 0
}

type Sphere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Center        []float32              `protobuf:"fixed32,1,rep,packed,name=center,proto3" json:"center,omitempty"`
	Radius        float32                `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Mat           *Material              `protobuf:"bytes,3,opt,name=mat,proto3" json:"mat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sphere) Reset() {
	*x = Sphere{}
	mi := &file_ray_tracer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sphere) ProtoMessage() {}

func (x *Sphere) ProtoReflect() protoreflect.Message {
	mi := &file_ray_tracer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sphere.ProtoReflect.Descriptor instead.
func (*Sphere) Descriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{2}
}

func (x *Sphere) GetCenter() []float32 {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Sphere) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Sphere) GetMat() *Material {
	if x != nil {
		return x.Mat
	}
	return nil
}

type WorldData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HittableList  []*Sphere              `protobuf:"bytes,1,rep,name=hittable_list,json=hittableList,proto3" json:"hittable_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorldData) Reset() {
	*x = WorldData{}
	mi := &file_ray_tracer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldData) ProtoMessage() {}

func (x *WorldData) ProtoReflect() protoreflect.Message {
	mi := &file_ray_tracer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldData.ProtoReflect.Descriptor instead.
func (*WorldData) Descriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{3}
}

func (x *WorldData) GetHittableList() []*Sphere {
	if x != nil {
		return x.HittableList
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	mi := &file_ray_tracer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ray_tracer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_ray_tracer_proto_rawDescGZIP(), []int{4}
}

func (x *ClientInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

var File_ray_tracer_proto protoreflect.FileDescriptor

const file_ray_tracer_proto_rawDesc = "" +
	"\n" +
	"\x10ray_tracer.proto\x12\n" +
	"ray_tracer\"I\n" +
	"\x05Image\x12\x14\n" +
	"\x05width\x18\x01 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x02 \x01(\x05R\x06height\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\xd3\x01\n" +
	"\bMaterial\x12=\n" +
	"\fMaterialType\x18\x01 \x01(\x0e2\x19.ray_tracer.Material.TypeR\fMaterialType\x12\x16\n" +
	"\x06albedo\x18\x02 \x03(\x02R\x06albedo\x12\x12\n" +
	"\x04fuzz\x18\x03 \x01(\x02R\x04fuzz\x12)\n" +
	"\x10refraction_index\x18\x04 \x01(\x02R\x0frefractionIndex\"1\n" +
	"\x04Type\x12\x0e\n" +
	"\n" +
	"LAMBERTIAN\x10\x00\x12\t\n" +
	"\x05METAL\x10\x01\x12\x0e\n" +
	"\n" +
	"DIELECTRIC\x10\x02\"`\n" +
	"\x06Sphere\x12\x16\n" +
	"\x06center\x18\x01 \x03(\x02R\x06center\x12\x16\n" +
	"\x06radius\x18\x02 \x01(\x02R\x06radius\x12&\n" +
	"\x03mat\x18\x03 \x01(\v2\x14.ray_tracer.MaterialR\x03mat\"D\n" +
	"\tWorldData\x127\n" +
	"\rhittable_list\x18\x01 \x03(\v2\x12.ray_tracer.SphereR\fhittableList\"(\n" +
	"\n" +
	"ClientInfo\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId2U\n" +
	"\x10worldDataService\x12A\n" +
	"\x0eRegisterClient\x12\x16.ray_tracer.ClientInfo\x1a\x15.ray_tracer.WorldData0\x01B%Z#github.com/Ank7Tz/Ray-Tracer/serverb\x06proto3"

var (
	file_ray_tracer_proto_rawDescOnce sync.Once
	file_ray_tracer_proto_rawDescData []byte
)

func file_ray_tracer_proto_rawDescGZIP() []byte {
	file_ray_tracer_proto_rawDescOnce.Do(func() {
		file_ray_tracer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ray_tracer_proto_rawDesc), len(file_ray_tracer_proto_rawDesc)))
	})
	return file_ray_tracer_proto_rawDescData
}

var file_ray_tracer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ray_tracer_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ray_tracer_proto_goTypes = []any{
	(Material_Type)(0), // 0: ray_tracer.Material.Type
	(*Image)(nil),      // 1: ray_tracer.Image
	(*Material)(nil),   // 2: ray_tracer.Material
	(*Sphere)(nil),     // 3: ray_tracer.Sphere
	(*WorldData)(nil),  // 4: ray_tracer.WorldData
	(*ClientInfo)(nil), // 5: ray_tracer.ClientInfo
}
var file_ray_tracer_proto_depIdxs = []int32{
	0, // 0: ray_tracer.Material.MaterialType:type_name -> ray_tracer.Material.Type
	2, // 1: ray_tracer.Sphere.mat:type_name -> ray_tracer.Material
	3, // 2: ray_tracer.WorldData.hittable_list:type_name -> ray_tracer.Sphere
	5, // 3: ray_tracer.worldDataService.RegisterClient:input_type -> ray_tracer.ClientInfo
	4, // 4: ray_tracer.worldDataService.RegisterClient:output_type -> ray_tracer.WorldData
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ray_tracer_proto_init() }
func file_ray_tracer_proto_init() {
	if File_ray_tracer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ray_tracer_proto_rawDesc), len(file_ray_tracer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ray_tracer_proto_goTypes,
		DependencyIndexes: file_ray_tracer_proto_depIdxs,
		EnumInfos:         file_ray_tracer_proto_enumTypes,
		MessageInfos:      file_ray_tracer_proto_msgTypes,
	}.Build()
	File_ray_tracer_proto = out.File
	file_ray_tracer_proto_goTypes = nil
	file_ray_tracer_proto_depIdxs = nil
}
